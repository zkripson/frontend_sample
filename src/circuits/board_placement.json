{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":6486223073495113955,"abi":{"parameters":[{"name":"ships","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"Ship","fields":[{"name":"start_x","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_y","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"end_x","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"end_y","type":{"kind":"integer","sign":"unsigned","width":8}}]}},"visibility":"private"},{"name":"salt","type":{"kind":"field"},"visibility":"private"},{"name":"board_commitment","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"20":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"61":{"source":"// SPDX-License-Identifier: MIT\n// Battleship Board Placement Circuit with Improved Hashing\n\n// Import the standard library\nuse std::hash;\n\n// A ship is defined by its start and end coordinates\nstruct Ship {\n    start_x: u8,\n    start_y: u8,\n    end_x: u8,\n    end_y: u8\n}\n\n// Main circuit for board placement validation\nfn main(\n    ships: [Ship; 5],        // Private: Ship positions\n    salt: Field,             // Private: Random salt for commitment\n    board_commitment: pub Field  // Public: Commitment to board state\n) {\n    // Board size constants\n    let board_size = 10;     // 10x10 board\n    \n    // Ship sizes in order [carrier, battleship, cruiser, submarine, destroyer]\n    let ship_size_0 = 5;  // Carrier\n    let ship_size_1 = 4;  // Battleship\n    let ship_size_2 = 3;  // Cruiser\n    let ship_size_3 = 3;  // Submarine\n    let ship_size_4 = 2;  // Destroyer\n    \n    // Step 1: Validate each ship is within bounds and has correct size\n    for i in 0..5 {\n        let ship = ships[i];\n        \n        // Check ship is on the board\n        assert(ship.start_x < board_size);\n        assert(ship.start_y < board_size);\n        assert(ship.end_x < board_size);\n        assert(ship.end_y < board_size);\n        \n        // Check ship is either horizontal or vertical\n        let is_horizontal = ship.start_y == ship.end_y;\n        let is_vertical = ship.start_x == ship.end_x;\n        assert(is_horizontal | is_vertical);\n        \n        // Special case for single-cell ships (shouldn't happen in valid battleship)\n        if is_horizontal & is_vertical {\n            assert(ship.start_x == ship.end_x);\n            assert(ship.start_y == ship.end_y);\n        }\n        \n        // Normalize ship coordinates\n        let normalized_ship = normalize_ship(ship);\n        \n        // Calculate ship length\n        let length = if is_horizontal {\n            normalized_ship.end_x - normalized_ship.start_x + 1\n        } else {\n            normalized_ship.end_y - normalized_ship.start_y + 1\n        };\n        \n        // Verify correct ship size\n        if i == 0 {\n            assert(length == ship_size_0);\n        } else if i == 1 {\n            assert(length == ship_size_1);\n        } else if i == 2 {\n            assert(length == ship_size_2);\n        } else if i == 3 {\n            assert(length == ship_size_3);\n        } else {\n            assert(length == ship_size_4);\n        }\n    }\n    \n    // Step 2: Check no ships overlap\n    for i in 0..4 {\n        for j in (i+1)..5 {\n            assert(!ships_overlap(ships[i], ships[j]));\n        }\n    }\n    \n    // Step 3: Calculate and verify board commitment\n    let calculated_commitment = calculate_board_commitment(ships, salt);\n    // assert(calculated_commitment == board_commitment);\n    // Use this to see the actual values in error messages\nif (calculated_commitment != board_commitment) {\n    assert(false);\n}\n}\n\n// Normalize ship coordinates so start is always less than or equal to end\nfn normalize_ship(ship: Ship) -> Ship {\n    if ship.start_x == ship.end_x {\n        // Vertical ship\n        if ship.start_y <= ship.end_y {\n            ship\n        } else {\n            Ship {\n                start_x: ship.start_x,\n                start_y: ship.end_y,\n                end_x: ship.end_x,\n                end_y: ship.start_y\n            }\n        }\n    } else {\n        // Horizontal ship\n        if ship.start_x <= ship.end_x {\n            ship\n        } else {\n            Ship {\n                start_x: ship.end_x,\n                start_y: ship.start_y,\n                end_x: ship.start_x,\n                end_y: ship.end_y\n            }\n        }\n    }\n}\n\n// Check if two ships overlap\nfn ships_overlap(ship1: Ship, ship2: Ship) -> bool {\n    // Normalize ships so start coordinates are less than end\n    let s1 = normalize_ship(ship1);\n    let s2 = normalize_ship(ship2);\n    \n    let mut result = false;\n    \n    // Ship 1 horizontal\n    if s1.start_y == s1.end_y {\n        // Ship 2 horizontal\n        if s2.start_y == s2.end_y {\n            // Both horizontal - check if they're on the same row and overlap\n            if s1.start_y == s2.start_y {\n                // Check overlap on x-axis\n                if !(s1.end_x < s2.start_x | s1.start_x > s2.end_x) {\n                    result = true;\n                }\n            }\n        } else {\n            // Ship 1 horizontal, Ship 2 vertical\n            // Check if vertical ship crosses the horizontal ship's row\n            if s2.start_x >= s1.start_x {\n                if s2.start_x <= s1.end_x {\n                    if s1.start_y >= s2.start_y {\n                        if s1.start_y <= s2.end_y {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        // Ship 1 vertical\n        if s2.start_y == s2.end_y {\n            // Ship 1 vertical, Ship 2 horizontal\n            // Check if horizontal ship crosses the vertical ship's column\n            if s1.start_x >= s2.start_x {\n                if s1.start_x <= s2.end_x {\n                    if s2.start_y >= s1.start_y {\n                        if s2.start_y <= s1.end_y {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        } else {\n            // Both vertical - check if they're on the same column and overlap\n            if s1.start_x == s2.start_x {\n                // Check overlap on y-axis\n                if !(s1.end_y < s2.start_y | s1.start_y > s2.end_y) {\n                    result = true;\n                }\n            }\n        }\n    }\n    \n    result\n}\n\n// Calculate the board commitment using Pedersen hash\nfn calculate_board_commitment(ships: [Ship; 5], salt: Field) -> Field {\n    // Flatten ship data for hashing\n    let mut data: [Field; 21] = [0; 21]; // 5 ships x 4 coordinates + 1 salt\n    \n    for i in 0..5 {\n        data[i*4] = ships[i].start_x as Field;\n        data[i*4 + 1] = ships[i].start_y as Field;\n        data[i*4 + 2] = ships[i].end_x as Field;\n        data[i*4 + 3] = ships[i].end_y as Field;\n    }\n    data[20] = salt;\n    \n    // Use the Pedersen hash from the standard library\n    hash::pedersen_hash(data)\n}\n\n// Test with valid ships\nfn test_valid_placement() {\n    // Create a valid board setup with non-overlapping ships\n    let ships = [\n        Ship { start_x: 0, start_y: 0, end_x: 4, end_y: 0 }, // Carrier - Length 5\n        Ship { start_x: 0, start_y: 2, end_x: 3, end_y: 2 }, // Battleship - Length 4\n        Ship { start_x: 5, start_y: 5, end_x: 7, end_y: 5 }, // Cruiser - Length 3\n        Ship { start_x: 9, start_y: 0, end_x: 9, end_y: 2 }, // Submarine - Length 3\n        Ship { start_x: 3, start_y: 7, end_x: 4, end_y: 7 }  // Destroyer - Length 2\n    ];\n    \n    let salt = 12345;\n    let commitment = calculate_board_commitment(ships, salt);\n    \n    // This should pass validation\n    main(ships, salt, commitment);\n}\n\n// This function will be run when the circuit is compiled \n// It serves as the primary test\nfn dummy_entrypoint() {\n    test_valid_placement();\n}","path":"/Users/lazerpay/Desktop/open-source/kripson/circuit/board_placement/src/main.nr"}},"names":["main"],"brillig_names":["decompose_hint","directive_integer_quotient","directive_invert"]}